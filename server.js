// server.js
// Palm AI API (LINE Bot + TensorFlow.js + OpenAI)
// Node v20 ‰ª•‰∏ä„ÄÇglobal fetch „Çí‰ΩøÁî®„ÄÇ

const express = require('express');
const tf = require('@tensorflow/tfjs-node');
const multer = require('multer');
const sharp = require('sharp');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
+// === Image preprocess: ÂÖ•Âäõ„Çí [1,224,224,3] „Å´Áµ±‰∏ÄÔºàexpandDims „ÅØ1Âõû„Å†„ÅëÔºâ===
+function preprocess(buffer) {
+  return tf.tidy(() => {
+    let img = tf.node.decodeImage(buffer, 3);      // [H, W, 3]
+    img = tf.image.resizeBilinear(img, [224, 224]); // [224, 224, 3]
+    img = img.toFloat().sub(127.5).div(127.5);
                   // 0-1 Ê≠£Ë¶èÂåñÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶Â§âÊõ¥Ôºâ
+    return img.expandDims(0);                       // [1, 224, 224, 3]
+  });
+}
const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(express.json({ limit: '10mb' }));

// ===== Env =====
const LINE_TOKEN = (process.env.LINE_CHANNEL_ACCESS_TOKEN || process.env.LINE_ACCESS_TOKEN || '').trim();
const OPENAI_KEY = (process.env.OPENAI_API_KEY || '').trim();
const OPENAI_MODEL = (process.env.OPENAI_MODEL || 'gpt-4o').trim();

if (!LINE_TOKEN) console.error('[BOOT] ‚ùå LINE token missing (set LINE_CHANNEL_ACCESS_TOKEN)');
if (!OPENAI_KEY) console.error('[BOOT] ‚ùå OPENAI_API_KEY missing');

const upload = multer({ limits: { fileSize: 10 * 1024 * 1024 } });

// ===== TFJS model =====
let model = null;
let loaded = false;

async function loadModel() {
  try {
    const modelPath = path.join(__dirname, 'models', 'model.json');
    if (!fs.existsSync(modelPath)) {
      throw new Error(`model.json not found: ${modelPath}Ôºàmodels/ „Å´ÈÖçÁΩÆ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºâ`);
    }
    console.log('[MODEL] Loading‚Ä¶', modelPath);
    model = await tf.loadLayersModel(`file://${modelPath}`);
    loaded = true;
    console.log('[MODEL] ‚úÖ Loaded');
  } catch (err) {
    loaded = false;
    console.error('[MODEL] ‚ùå Load error:', err);
  }
}

// RGBA‚ÜíRGB / 224x224 / [0,1] Ê≠£Ë¶èÂåñ
async function imageToTensorRGB(buffer) {
  const raw = await sharp(buffer)
    .resize(224, 224, { fit: 'cover' })
    .removeAlpha()
    .raw()
    .toBuffer(); // Uint8Array

  const float = new Float32Array(raw.length);
  for (let i = 0; i < raw.length; i++) float[i] = raw[i] / 255.0;
  return tf.tensor4d(float, [1, 224, 224, 3]);
}

function generateReading(hand) {
  const readings = {
    left:  'Â∑¶Êâã„ÅØ„ÄåÊú¨Ë≥™„ÉªÂÖàÂ§©ÈÅã„Äç„ÄÇÂÜÖÈù¢„ÅÆÂº∑„Åï„Å®ÂâµÈÄ†ÊÄß„ÅåÊ†π„Å£„Åì„Å´„ÅÇ„Çä„Åæ„Åô„ÄÇ',
    right: 'Âè≥Êâã„ÅØ„ÄåÊú™Êù•„ÉªÂæåÂ§©ÈÅã„Äç„ÄÇË°åÂãïÂäõ„ÉªÂÆüË°åÂäõ„Åå‰º∏„Å≥„Çã„Çø„Ç§„Éü„É≥„Ç∞„Åß„Åô„ÄÇ'
  };
  return readings[hand] || 'Êâã„ÅÆ„Å≤„Çâ„Åã„ÇâËâØ„ÅÑ„Ç®„Éç„É´„ÇÆ„Éº„ÄÇÂâçÂêë„Åç„Å´ÈÄ≤„ÇÅ„Å∞ÈÅã„ÅåÂë≥Êñπ„Åó„Åæ„Åô„ÄÇ';
}

// ===== Basic endpoints =====
app.get('/', (_req, res) => res.json({ status: 'OK', loaded }));
app.get('/health', (_req, res) => res.json({ status: loaded ? 'healthy' : 'loading' }));

// ÁîªÂÉèÂçò‰ΩìAPIÔºàÈñãÁô∫Áî®Ôºâ
app.post('/analyze-palm', upload.single('image'), async (req, res) => {
  try {
    if (!loaded) return res.status(503).json({ error: 'Model loading' });
    if (!req.file) return res.status(400).json({ error: 'No image' });

    const tensor = await imageToTensorRGB(req.file.buffer);
    const pred = await model.predict(tensor).data();
    tensor.dispose();

    const hand = pred[0] > 0.5 ? 'right' : 'left';     // Âè≥Á¢∫Áéá„Çí pred[0] „Å®‰ªÆÂÆö
    const handJa = hand === 'right' ? 'Âè≥Êâã' : 'Â∑¶Êâã';
    const conf = Math.round(Math.max(pred[0], 1 - pred[0]) * 100);
    const reading = generateReading(hand);

    res.json({
      success: true,
      hand: handJa,
      handEn: hand,
      confidence: conf,
      palmReading: reading,
      lineMessage: `${handJa}„ÇíÊ§úÂá∫ÔºÅÁ¢∫‰ø°Â∫¶: ${conf}%\n\n${reading}`
    });
  } catch (err) {
    console.error('[ANALYZE] error:', err);
    res.status(500).json({ error: err.message });
  }
});

// ===== LINE Webhook =====
app.post('/test-webhook', (req, res) => res.json({ ok: true, data: req.body }));

app.post('/line-webhook', async (req, res) => {
  try {
    const events = req.body?.events || [];
    for (const event of events) {
      if (event.type !== 'message') continue;

      if (event.message.type === 'image') {
        await handlePalmReading(event);
      } else if (event.message.type === 'text') {
        await handleTextMessage(event);
      }
    }
    res.sendStatus(200); // „Åô„Åê 200 „ÇíËøî„Åô
  } catch (err) {
    console.error('[WEBHOOK] error:', err);
    res.sendStatus(500);
  }
});

// ÁîªÂÉè„É°„ÉÉ„Çª„Éº„Ç∏Âá¶ÁêÜ
async function handlePalmReading(event) {
  try {
    if (!LINE_TOKEN) throw new Error('LINE token missing');

    // 1) ÁîªÂÉèÂèñÂæó
    const imgRes = await fetch(
      `https://api-data.line.me/v2/bot/message/${event.message.id}/content`,
      { headers: { Authorization: `Bearer ${LINE_TOKEN}` } }
    );
    if (!imgRes.ok) {
      const body = await imgRes.text();
      throw new Error(`Get image failed: ${imgRes.status} ${body}`);
    }
    const imgBuf = Buffer.from(await imgRes.arrayBuffer());

    // 2) Êé®Ë´ñ
    if (!loaded) throw new Error('Model not loaded');
    const tensor = await imageToTensorRGB(imgBuf);
    const pred = await model.predict(tensor).data();
    tensor.dispose();

    const hand = pred[0] > 0.5 ? 'right' : 'left';
    const handJa = hand === 'right' ? 'Âè≥Êâã' : 'Â∑¶Êâã';
    const conf = Math.round(Math.max(pred[0], 1 - pred[0]) * 100);

    const palmData = {
      hand: handJa,
      handEn: hand,
      confidence: conf,
      palmReading: generateReading(hand)
    };

    // 3) ÈëëÂÆö
    const fortune = await getChatGPTFortune(palmData);

    // 4) Ëøî‰ø°
    await replyToLine(event.replyToken, fortune);
  } catch (err) {
    console.error('[PALM] error:', err);
    await replyToLine(
      event.replyToken,
      'Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„ÄÇÊâãÁõ∏„ÅÆËß£Êûê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åüüôè\n\n' +
        'üì∏ ÊíÆÂΩ±„ÅÆ„Ç≥„ÉÑ\n' +
        '„ÉªÊòé„Çã„ÅÑÂ†¥ÊâÄÔºàËá™ÁÑ∂ÂÖâ„Åå„Éô„Çπ„ÉàÔºâ\n' +
        '„ÉªÊâã„ÅÆ„Å≤„ÇâÂÖ®‰Ωì„ÅåÂÖ•„Çã„Çà„ÅÜ„Å´\n' +
        '„Éª„Éî„É≥„Åº„Åë„Å´Ê≥®ÊÑè\n\n' +
        '„ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ'
    );
  }
}

// „ÉÜ„Ç≠„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏Âá¶ÁêÜ
async function handleTextMessage(event) {
  const text = (event.message.text || '').toLowerCase();
  let reply = '';

  if (/(„Åì„Çì„Å´„Å°|„ÅØ„Åò„ÇÅ|hello)/.test(text)) {
    reply =
      '„Åì„Çì„Å´„Å°„ÅØÔºÅÊâãÁõ∏ÈëëÂÆöbot„Åß„Åô‚úã\n\n' +
      'Êâã„ÅÆ„Å≤„Çâ„ÅÆÂÜôÁúü„ÇíÈÄÅ„Å£„Å¶„ÅÑ„Åü„Å†„Åë„Çå„Å∞„ÄÅAIÂàÜÊûêÔºãÈëëÂÆöÁµêÊûú„Çí„ÅäËøî„Åó„Åó„Åæ„Åô„ÄÇ\n\n' +
      'üì∏ „Ç≥„ÉÑÔºöÊòé„Çã„ÅÑÂ†¥ÊâÄÔºèÊâã„ÅÆ„Å≤„ÇâÂÖ®‰ΩìÔºè„Éî„É≥„Åº„ÅëÊ≥®ÊÑè';
  } else if (/(‰Ωø„ÅÑÊñπ|„Éò„É´„Éó|help)/.test(text)) {
    reply =
      'üìã ‰Ωø„ÅÑÊñπ\n' +
      '1) Êâã„ÅÆ„Å≤„Çâ„ÇíÊíÆÂΩ±\n2) „Åì„ÅÆ„Éà„Éº„ÇØ„Å´ÂÜôÁúü„ÇíÈÄÅ‰ø°\n3) AI„ÅÆÈëëÂÆö„ÅåËøî„Å£„Å¶„Åç„Åæ„Åô\n\n' +
      '„Çà„ÇäÊ≠£Á¢∫„Å´ÔºöËá™ÁÑ∂ÂÖâ„ÉªÊâã„ÇíÂ∫É„Åí„Çã„ÉªÊåáÂÖà„ÄúÊâãÈ¶ñ„Åæ„ÅßÂÜô„Åôüì∑';
  } else {
    reply =
      '„ÅîÂà©Áî®„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ‚ú®\n' +
      'ÊâãÁõ∏ÈëëÂÆö„Çí„ÅîÂ∏åÊúõ„Å™„Çâ„ÄÅÊâã„ÅÆ„Å≤„Çâ„ÅÆÂÜôÁúü„ÇíÈÄÅ„Å£„Å¶„Åè„Å†„Åï„ÅÑ„Å≠üì∏\n' +
      'Âõ∞„Å£„Åü„Çâ„Äå„Éò„É´„Éó„Äç„Å®ÈÄÅ„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ';
  }
  await replyToLine(event.replyToken, reply);
}

// OpenAI
async function getChatGPTFortune(palmData) {
  try {
    if (!OPENAI_KEY) throw new Error('OpenAI key missing');

    const prompt = `
ÊâãÁõ∏ÈëëÂÆö„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô„ÄÇ

„ÄêËß£Êûê„Éá„Éº„Çø„Äë
Êâã: ${palmData.hand}
‰ø°È†ºÂ∫¶: ${palmData.confidence}%
Âü∫Êú¨ÈëëÂÆö: ${palmData.palmReading}

„ÄêÈëëÂÆö„Çπ„Çø„Ç§„É´„Äë
- Ê∏©„Åã„ÅèË¶™„Åó„Åø„ÇÑ„Åô„ÅÑÈñ¢Ë•øÂºÅ„Åæ„Åò„Çä
- ËâØ„ÅÑÈù¢‚ÜíÂª∫Ë®≠ÁöÑ„Ç¢„Éâ„Éê„Ç§„Çπ
- ÂÖ∑‰ΩìÁöÑ„ÉªÂÆüË∑µÁöÑ
- ÂâçÂêë„Åç„Å™ÁµêË´ñ„ÅßÁ∑†„ÇÅ„Çã

„ÄêÂê´„ÇÅ„Çã„Äë
üåü ÊâãÁõ∏„ÅÆÁâπÂæ¥
üí™ ÁîüÂëΩÁ∑öÔºàÂÅ•Â∫∑„ÉªÁîüÂëΩÂäõÔºâ
üß† Áü•ËÉΩÁ∑öÔºàÊâçËÉΩ„ÉªÈÅ©ËÅ∑Ôºâ
‚ù§Ô∏è ÊÑüÊÉÖÁ∑öÔºàÊÅãÊÑõ„Éª‰∫∫ÈñìÈñ¢‰øÇÔºâ
üçÄ Á∑èÂêàÈÅã„Å®„Ç¢„Éâ„Éê„Ç§„Çπ

„ÄêÊñáÂ≠óÊï∞„Äë400-500ÊñáÂ≠ó
`;

    const r = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${OPENAI_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: OPENAI_MODEL,
        messages: [
          { role: 'system', content: 'Ë¶™„Åó„Åø„ÇÑ„Åô„ÅÑ„Éô„ÉÜ„É©„É≥ÊâãÁõ∏ÈëëÂÆöÂ∏´„Å®„Åó„Å¶‰∏ÅÂØß„Å´ÈëëÂÆö„Åô„Çã„ÄÇ' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 800,
        temperature: 0.7
      })
    });

    if (!r.ok) {
      const body = await r.text();
      throw new Error(`OpenAI ${r.status} ${body}`);
    }
    const json = await r.json();
    return json.choices?.[0]?.message?.content?.trim() || 'ÈëëÂÆöÁµêÊûú„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü„ÄÇ';
  } catch (err) {
    console.error('[OPENAI] error:', err);
    return (
      `${palmData.hand}„ÅÆÊâãÁõ∏„ÇíÊãùË¶ã„Åó„Åæ„Åó„Åü‚úã\n\n` +
      `${palmData.palmReading}\n\n` +
      `‰ø°È†ºÂ∫¶: ${palmData.confidence}%\n\n` +
      `‚ÄªË©≥Á¥∞„Å™ÈëëÂÆö„ÅØÂæå„Åª„Å©„ÅäÂ±ä„Åë„Åó„Åæ„Åô„ÄÇ`
    );
  }
}

// LINEËøî‰ø°
async function replyToLine(replyToken, message) {
  try {
    if (!LINE_TOKEN) throw new Error('LINE token missing');

    const r = await fetch('https://api.line.me/v2/bot/message/reply', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${LINE_TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        replyToken,
        messages: [{ type: 'text', text: message }]
      })
    });
    if (!r.ok) {
      const body = await r.text();
      throw new Error(`LINE reply failed: ${r.status} ${body}`);
    }
  } catch (err) {
    console.error('[LINE] reply error:', err);
  }
}

// Boot
loadModel().finally(() => {
  app.listen(PORT, () => console.log(`[BOOT] Server listening on ${PORT}`));
});
